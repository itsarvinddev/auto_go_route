// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND
// This file was generated by auto_go_route_generator

// ignore_for_file: type=lint
// ignore_for_file: unused_element
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_literals_to_create_immutables

part of 'app_router.dart';

// **************************************************************************
// AutoGoRouteGenerator
// **************************************************************************

// ignore_for_file: unused_element

typedef _RouteRefSettingsRoute = SettingsRoute;
typedef _RouteRefProfileRoute = ProfileRoute;
typedef _RouteRefLegacyProfileRoute = LegacyProfileRoute;
typedef _RouteRefLoginRoute = LoginRoute;
typedef _RouteRefNewFeatureRoute = NewFeatureRoute;
typedef _RouteRefProductListRoute = ProductListRoute;
typedef _RouteRefProductDetailsRoute = ProductDetailsRoute;
typedef _RouteRefProductReviewsRoute = ProductReviewsRoute;
typedef _RouteRefProductOffersRoute = ProductOffersRoute;
typedef _RouteRefHomeRoute = HomeRoute;
typedef _RouteRefDashboardShell = DashboardShell;

abstract class _$AppRouter {
  List<RoutePaths> get allRoutes {
    return [
      settingsRouteRoute,
      profileRouteRoute,
      legacyProfileRouteRoute,
      loginRouteRoute,
      newFeatureRouteRoute,
      productListRouteRoute,
      productDetailsRouteRoute,
      productReviewsRouteRoute,
      productOffersRouteRoute,
      homeRouteRoute,
    ];
  }

  List<ShellRoutePaths> get allShells {
    return [dashboardShellRoute];
  }

  List<RouteBase> _buildNestedRoutes() {
    return [
      legacyProfileRouteRoute.toGoRoute(routes: []),
      loginRouteRoute.toGoRoute(routes: []),
      newFeatureRouteRoute.toGoRoute(routes: []),
      productListRouteRoute.toGoRoute(routes: []),
      productDetailsRouteRoute.toGoRoute(
        routes: [
          productReviewsRouteRoute.toGoRoute(routes: []),
          productOffersRouteRoute.toGoRoute(routes: []),
        ],
      ),
      GoRoute(
        path: '/',
        redirect: (context, state) {
          if (state.uri.path == '/') {
            return '/home';
          }
          return null;
        },
        routes: [
          StatefulShellRoute.indexedStack(
            builder: dashboardShellRoute.builder,
            branches: [
              StatefulShellBranch(
                routes: [homeRouteRoute.toGoRoute(routes: [])],
              ),
              StatefulShellBranch(
                routes: [profileRouteRoute.toGoRoute(routes: [])],
              ),
              StatefulShellBranch(
                routes: [settingsRouteRoute.toGoRoute(routes: [])],
              ),
            ],
          ),
        ],
      ),
    ];
  }

  GoRouter buildRouter([GlobalKey<NavigatorState>? navigatorKey]) {
    return GoRouter(
      redirect: loggingMiddleware,
      errorBuilder: (context, state) => ErrorScreen.new(error: state.error),
      navigatorKey: navigatorKey,
      routes: _buildNestedRoutes(),
    );
  }

  SettingsRouteRoute get settingsRouteRoute {
    return SettingsRouteRoute();
  }

  ProfileRouteRoute get profileRouteRoute {
    return ProfileRouteRoute();
  }

  LegacyProfileRouteRoute get legacyProfileRouteRoute {
    return LegacyProfileRouteRoute();
  }

  LoginRouteRoute get loginRouteRoute {
    return LoginRouteRoute();
  }

  NewFeatureRouteRoute get newFeatureRouteRoute {
    return NewFeatureRouteRoute();
  }

  ProductListRouteRoute get productListRouteRoute {
    return ProductListRouteRoute();
  }

  ProductDetailsRouteRoute get productDetailsRouteRoute {
    return ProductDetailsRouteRoute();
  }

  ProductReviewsRouteRoute get productReviewsRouteRoute {
    return ProductReviewsRouteRoute();
  }

  ProductOffersRouteRoute get productOffersRouteRoute {
    return ProductOffersRouteRoute();
  }

  HomeRouteRoute get homeRouteRoute {
    return HomeRouteRoute();
  }

  DashboardShellRoute get dashboardShellRoute {
    return DashboardShellRoute();
  }
}

class SettingsRouteRoute extends NestedRoutePaths {
  SettingsRouteRoute()
    : super(
        parentPath: '/',
        path: '/settings',
        name: 'settingsRoute',
        builder: (context, state) => SettingsRoute(),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class ProfileRouteRoute extends NestedRoutePaths {
  ProfileRouteRoute()
    : super(
        parentPath: '/',
        path: '/profile',
        name: 'profileRoute',
        builder: (context, state) => ProfileRoute(),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class LegacyProfileRouteRoute extends RoutePaths {
  LegacyProfileRouteRoute()
    : super(
        path: '/account',
        name: 'legacyProfileRoute',
        middleware: const [legacyProfileRedirect],
        builder: (context, state) => LegacyProfileRoute(),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class LoginRouteRoute extends RoutePaths {
  LoginRouteRoute()
    : super(
        path: '/login',
        name: 'loginRoute',
        builder: (context, state) => LoginRoute(),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class NewFeatureRouteRoute extends RoutePaths {
  NewFeatureRouteRoute()
    : super(
        path: '/new-feature',
        name: 'newFeatureRoute',
        middleware: const [featureFlagMiddleware],
        builder: (context, state) => NewFeatureRoute(),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class ProductListRouteRoute extends RoutePaths {
  ProductListRouteRoute()
    : super(
        path: '/products',
        name: 'productListRoute',
        builder: (context, state) => ProductListRoute(),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class ProductDetailsRouteRoute extends RoutePaths {
  ProductDetailsRouteRoute()
    : super(
        path: '/products/:id',
        name: 'productDetailsRoute',
        builder: (context, state) => ProductDetailsRoute(
          id: state.getParam<String>('id'),
          name: state.getParam<String>('name'),
        ),
      );

  String pathWith({required String id, Map<String, String>? queries}) {
    return pathWithParams({'id': id}, queries: queries);
  }
}

class ProductReviewsRouteRoute extends NestedRoutePaths {
  ProductReviewsRouteRoute()
    : super(
        parentPath: '/products/:id',
        path: 'reviews',
        name: 'productReviewsRoute',
        builder: (context, state) =>
            ProductReviewsRoute(id: state.getParam<String>('id')),
      );

  String pathWith({required String id, Map<String, String>? queries}) {
    return pathWithParams({'id': id}, queries: queries);
  }
}

class ProductOffersRouteRoute extends NestedRoutePaths {
  ProductOffersRouteRoute()
    : super(
        parentPath: '/products/:id',
        path: 'offers',
        name: 'productOffersRoute',
        builder: (context, state) =>
            ProductOffersRoute(id: state.getParam<String>('id')),
      );

  String pathWith({required String id, Map<String, String>? queries}) {
    return pathWithParams({'id': id}, queries: queries);
  }
}

class HomeRouteRoute extends NestedRoutePaths {
  HomeRouteRoute()
    : super(
        parentPath: '/',
        path: '/home',
        name: 'homeRoute',
        builder: (context, state) => HomeRoute(
          featureDisabled: state.getParam<String>('featureDisabled'),
        ),
      );

  String pathWith({Map<String, String>? queries}) {
    return pathWithParams({}, queries: queries);
  }
}

class DashboardShellRoute extends ShellRoutePaths {
  DashboardShellRoute()
    : super(
        path: '/',

        isStateful: true,
        builder: (context, state, child) =>
            DashboardShell(navigationShell: child as StatefulNavigationShell),
      );
}

extension AutoGoRouteNavigation on BuildContext {
  void goToSettingsRoute({Map<String, String>? queries}) {
    go(SettingsRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToSettingsRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(SettingsRouteRoute().pathWith(queries: queries));
  }

  void replaceWithSettingsRoute({Map<String, String>? queries}) {
    pushReplacement(SettingsRouteRoute().pathWith(queries: queries));
  }

  void goToProfileRoute({Map<String, String>? queries}) {
    go(ProfileRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToProfileRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(ProfileRouteRoute().pathWith(queries: queries));
  }

  void replaceWithProfileRoute({Map<String, String>? queries}) {
    pushReplacement(ProfileRouteRoute().pathWith(queries: queries));
  }

  void goToLegacyProfileRoute({Map<String, String>? queries}) {
    go(LegacyProfileRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToLegacyProfileRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(LegacyProfileRouteRoute().pathWith(queries: queries));
  }

  void replaceWithLegacyProfileRoute({Map<String, String>? queries}) {
    pushReplacement(LegacyProfileRouteRoute().pathWith(queries: queries));
  }

  void goToLoginRoute({Map<String, String>? queries}) {
    go(LoginRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToLoginRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(LoginRouteRoute().pathWith(queries: queries));
  }

  void replaceWithLoginRoute({Map<String, String>? queries}) {
    pushReplacement(LoginRouteRoute().pathWith(queries: queries));
  }

  void goToNewFeatureRoute({Map<String, String>? queries}) {
    go(NewFeatureRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToNewFeatureRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(NewFeatureRouteRoute().pathWith(queries: queries));
  }

  void replaceWithNewFeatureRoute({Map<String, String>? queries}) {
    pushReplacement(NewFeatureRouteRoute().pathWith(queries: queries));
  }

  void goToProductListRoute({Map<String, String>? queries}) {
    go(ProductListRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToProductListRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(ProductListRouteRoute().pathWith(queries: queries));
  }

  void replaceWithProductListRoute({Map<String, String>? queries}) {
    pushReplacement(ProductListRouteRoute().pathWith(queries: queries));
  }

  void goToProductDetailsRoute({
    required String id,
    Map<String, String>? queries,
  }) {
    go(ProductDetailsRouteRoute().pathWith(id: id, queries: queries));
  }

  Future<T?> pushToProductDetailsRoute<T extends Object?>({
    required String id,
    Map<String, String>? queries,
  }) {
    return push<T>(
      ProductDetailsRouteRoute().pathWith(id: id, queries: queries),
    );
  }

  void replaceWithProductDetailsRoute({
    required String id,
    Map<String, String>? queries,
  }) {
    pushReplacement(
      ProductDetailsRouteRoute().pathWith(id: id, queries: queries),
    );
  }

  void goToProductReviewsRoute({
    required String id,
    Map<String, String>? queries,
  }) {
    go(ProductReviewsRouteRoute().pathWith(id: id, queries: queries));
  }

  Future<T?> pushToProductReviewsRoute<T extends Object?>({
    required String id,
    Map<String, String>? queries,
  }) {
    return push<T>(
      ProductReviewsRouteRoute().pathWith(id: id, queries: queries),
    );
  }

  void replaceWithProductReviewsRoute({
    required String id,
    Map<String, String>? queries,
  }) {
    pushReplacement(
      ProductReviewsRouteRoute().pathWith(id: id, queries: queries),
    );
  }

  void goToProductOffersRoute({
    required String id,
    Map<String, String>? queries,
  }) {
    go(ProductOffersRouteRoute().pathWith(id: id, queries: queries));
  }

  Future<T?> pushToProductOffersRoute<T extends Object?>({
    required String id,
    Map<String, String>? queries,
  }) {
    return push<T>(
      ProductOffersRouteRoute().pathWith(id: id, queries: queries),
    );
  }

  void replaceWithProductOffersRoute({
    required String id,
    Map<String, String>? queries,
  }) {
    pushReplacement(
      ProductOffersRouteRoute().pathWith(id: id, queries: queries),
    );
  }

  void goToHomeRoute({Map<String, String>? queries}) {
    go(HomeRouteRoute().pathWith(queries: queries));
  }

  Future<T?> pushToHomeRoute<T extends Object?>({
    Map<String, String>? queries,
  }) {
    return push<T>(HomeRouteRoute().pathWith(queries: queries));
  }

  void replaceWithHomeRoute({Map<String, String>? queries}) {
    pushReplacement(HomeRouteRoute().pathWith(queries: queries));
  }
}
